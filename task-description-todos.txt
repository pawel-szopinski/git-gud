https://www.baeldung.com/java-picocli-create-command-line-program

Projekty indywidualne - do wyboru. Poziom trudności oceniony "na oko".
Tym razem wszystkie aplikacje są aplikacjami konsolowymi, nie webowymi.
Jeśli będziecie korzystać ze Springa polecamy CommandLineRunner.
Jeśli nie lubicie Springa to można stworzyć klasyczna aplikacje Javowa bez Springa jakie pisaliśmy na początku (zaczynamy w metodzie main).
Reguły i system oceniania takie same jak w projektach grupowych (Maven, Git etc).
Dodam tylko że zamiast zasad RESTa, fajnie by poczytać albo poanalizować jak wyglądają i jak przyjmują parametry aplikacje konsolowe.
(konwencja -- lub - etc). Git jest fajnym przykładem - zerknijcie jak wyglądaja komendy które wykonywaliśmy.
Pomocna może tu być jedna z bibliotek do parsowania podawanych parametrów (argsy). Na przykład: https://commons.apache.org/proper/commons-cli/
łatwe:
- aplikacja podobna do zleconych wcześniej (bookstore,todo czy tych z projetków grupowych) ale z interfejsem konsolowym zamiast web. Podstawowe operacje jak dodanie/usuwanie/listowanie/aktualizacja produktu/ksiażki/zadania/seansu. Dane logowania i lokalizacja bazy danych powinna być podawana w osobnym pliku .properties w tym samym folderze co plik .jar (external configuration)
Przykład dodania ksiązki: jar bookstore.jar add-book -name 'Author' -title 'Tytul' -pages 322 (nie musi być identycznie, to tylko przykład)
średnie:
- narzędzie exportujące zawartość bazy danych do pliku csv/excel. Znów dane logowania i lokalizacja bazy danych w pliku konfiguracyjnym. W parametrze aplikacji przekazujemy nazwy tabel i filtry (np. liczba wierszy, kolejność malejąca lub rosnąca, a nawet proste filtry <to trudniejsze>). Format i lokalizacja pliku podawany także w parametrach (csv, xslx lub inne). Opcjonalnie możliwość uploadu na serwer FTP (prócz ścieżki, dodajemy adres serwera)
Przykład exportu tabeli do pliku: jar table-exporter.jar --table-names="products,users" --order=asc --limit=100 --format=csv --location="c:/test"
- aplikacja pogodowa. W parametrach przekazujemy miasto (albo lokacje w stopniach geograficznych) i dostajemy w odpowiedzi wypis z aktualna i prognozowaną pogodą (temperatura, wiatr, zachmurzenie, opady etc). Mozemy także podać opcjonalnie dzień lub godzinę na która chcemy sprawdzić pogodę. Pogoda ma być prawdziwa. Aby to osiągnąć musicie połączyć się i zrobić zapytania do jakiegos API pogodowego - których jest tysiące. Jeśli użyjecie Springa to używając RestTemplate robicie GET pod odpowiedni adres i juz macie pogode w jsonie. Niektóre API mogą mieć ograniczenia co do ilości strzałów oraz mogą być chronione kluczem - trzeba poczytać Quickstarty jak się do nich dobrać.
Przykład: jar weather-now.jar -c "Warsaw" -d "2020-02-02 13:00"
trudne:
- aplikacja łącząca się z api github https://developer.github.com/v3/. Plik konfiguracyjny obok pliku .jar. Dostepne opcje to np. drukowanie szczegółów repozytorium, komentarzy, commitow, branchy. Opcji jest tyle że wolny wybór.
Brak tematu dla Ciebie? Nic starconego!!!! xD a tak serio to jeśli powyższe tematy nie są dla Was to możecie zaimplementować konsolową apkę wykorzystującą dowolne API które Was interesuje. Znalazłem taką listę: https://apilist.fun.
Wyszukiwanie lotów, info o zwierzętach i moje ulubione - meme generator (np. https://api.imgflip.com/) xD Odpadają aplikacje które będą mieć tylko jedna prostą funkcje - np. zwróc losowy żart. No i nie gwarantuje że API które są na tej liście są dobrze udokumentowane i działają :) W przypadku wyboru własnego API - dajcie znać jak najszybciej co wybraliście.


subcommands - auto added from package?
ascii logo and help when no params
async httprequest